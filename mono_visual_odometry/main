import numpy as np 
import cv2
import time

from visual_odometry_change import PinholeCamera, VisualOdometry

#It is my path. you would like to use your own path.
vopath= 'D:\\dataset_all\\KITTI_dataset_22G\\dataset\\poses\\00.txt'  #真实轨迹路径
imgpath='D:\\opencv_test\\kaggle_test_vo\\'  #图片路径#使用英文路径
imgpath='D:\\dataset_all\\KITTI_dataset_22G\\dataset\\sequences\\00\\image_0\\'

cam = PinholeCamera(1241.0, 376.0, 718.8560, 718.8560, 607.1928, 185.2157)#相机标定

vo = VisualOdometry(cam, vopath)
traj = np.zeros((600,600,3), dtype=np.uint8)#构建一幅空白图片

#计算总误差
error_sum_all = 0.0 

beginning = time.time() #全局开始时间
for img_id in range(4541):
#for img_id in range(100):
    start = cv2.getTickCount()
    # 记录当前时间，以时钟周期计算
    
    img = cv2.imread((imgpath+str(img_id).zfill(6)+'.png'), 0)#读入图片

    vo.update(img, img_id)#更新图片

    cur_t = vo.cur_t #真实值
    if(img_id > 2):
        x, y, z = cur_t[0], cur_t[1], cur_t[2]
        ##print(x)
        ##print(y)
        ##print(z)
    else:
        x, y, z = 0., 0., 0.#设定初值

    #x是原视觉里程计值，draw_x为画图所用值
    draw_x, draw_y = int(x)+290, int(z)+90#画图所用视觉里程计的值
    true_x, true_y = int(vo.trueX)+290, int(vo.trueZ)+90#画图所用真实值


    radius_cm = ((x - vo.trueX)**2+(y - vo.trueY)**2)**0.5#设定误差为二者距离# _cm的精确度高
    radius_meter = ((draw_x - true_x)**2+(draw_y - true_y)**2)**0.5# _meter指误差会精确到米位，精确度低
    
    cv2.circle(traj, (draw_x,draw_y), 1, (img_id*255/4540,255-img_id*255/4540,0), 1)
    cv2.circle(traj, (true_x,true_y), 1, (0,0,255), 2)
    cv2.rectangle(traj, (10, 20), (600, 60), (0,0,0), -1)
    text = "Coordinates: x=%2fm y=%2fm z=%2fm"%(x,y,z) # 真实值

    cv2.putText(traj, text, (20,40), cv2.FONT_HERSHEY_PLAIN, 1, (255,255,255), 1, 8)
    #各参数依次是：图片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细

    cv2.imshow('Road facing camera', img)
    cv2.imshow('Trajectory', traj)
    cv2.waitKey(1)
    
    end = cv2.getTickCount()# 记录当前时间
    
    during1 = (end - start) / cv2.getTickFrequency()#每帧运行时间
    end_global = time.time()
    during_global = end_global - beginning#总时间
    error_sum_all += radius_cm
    
    #print(type(radius_cm))
    print('当前处理的图片为第 {} 帧， 所用时间为{}秒'.format(img_id,during1))#输出目前的图片名称
    print('运行时间为 {} 秒 ,测量值与真实值的误差为{}厘米'.format(during_global,radius_cm)) #输出误差
    print('\n')
    
    
#cv2.imwrite('map.png', traj)
cv2.imshow('map.png',traj)
print('每次误差之和为 {}'.format(error_sum_all)) # 不是累计误差，只是一个误差的和


